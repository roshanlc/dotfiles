{
  // Place your snippets for go here. Each snippet is defined under a snippet name and has a prefix, body and
  // description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
  // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the
  // same ids are connected.
  // Example:
  // "Print to console": {
  // 	"prefix": "log",
  // 	"body": [
  // 		"console.log('$1');",
  // 		"$2"
  // 	],
  // 	"description": "Log output to console"
  // }

  // To check for error
  "Error check": {
    "prefix": "if err!=nil",
    "body": ["if err !=nil {", " ", "}"],
    "description": "Block of code to check for any error"
  },

  // Struct method
  "Struct Method": {
    "prefix": "func (app *application)",
    "body": ["func (app *application) methodName() {", " ", "}"],
    "description": "Snippet to generate struct method"
  },

  //Create a struct
  "Create a struct": {
    "prefix": "type ",
    "body": ["type struct_name struct {", " ", "}"],
    "description": "Snippet to create a struct object"
  },

  //Fill up an empty go file
  "Create intial go file": {
    "prefix": "package main",
    "body": ["package main", "", "func main() {", "", "}"]
  },
  //Println from fmt package
  "Print with new line": {
    "prefix": "Println",
    "body": ["fmt.Println()"]
  }
}
